#Първо заявеният атрибут се търси в обекта, а ако не бъде намерен там - тогава се търси в класа, на основата на който е създаден обектът.
#Достъп до речника, посредством койот е реализиран обектът, може да бъде получен с помощта на специалния метод __dict__
#Ако полето е заявено за класа, ще получим речника за обекта, посредством който е реализиран класът. Ако полето се заявява за обекта, като резултат ще получим речника, посредством който е реализиран даденият обект.

#Създаваме два класа:
class Alpha:
    pass
class Bravo:
    name = 'Bravo'
    def display():
        print(f"Поле name: {Bravo.name}")
    def show(self): #self е аргумент - референция към обекта, от който се извиква методът.
        print(f'Поле value: {self.value}') #При извикването му се показва стойността на value от обекта, от който се извиква методът.
    def __init__(self):
        self.value = 123
#Сега създавам обектите:
A = Alpha()
B = Bravo()

#Атрибутите на първия клас:
print("Клас Alpha")
n = 1
for s in Alpha.__dict__:
    print("["+str(n)+"] "+s+":", Alpha.__dict__[s])
    n += 1
#Атрибути на втория клас:
print(f"Клас Bravo:")
n = 1
for s in Bravo.__dict__:
    print(f"[{n}] {s}: {Bravo.__dict__[s]}")
    n += 1
#Атриб ите:
print(f"Обект А: {A.__dict__}")
print(f"Обект В: {B.__dict__}")
#И двата класа съдържат повече атрубити, отколкото са оказани в кода. Тези 'скрити' атрибути са т.нар 'служебни' атрибути, които са достъпни за класовете по подразбиране. Сред тях е и полето __dict__.
#A и В са обекти, референции към класовете Алфа и Браво. За обектите се показват само онези атрибути, които са зададени непосредствено за обекта.

#Извикване на метода на класа:
Bravo.display()
print()
#Създаване на атрибут на класа:
Alpha.display = Bravo.display #Вследствие от тази команда в клас Alpha се създава атрибут display. Стойност на атрибута се явява адресът на обекта, чрез който е реализиран метод display() от класа Bravo.

#Изтриване на атрибут на класа:
del Bravo.display
#Извикване на метода от обекта:
B.show()
#Създаване на атрибут на класа:
A.color = 'Червен'
#Създаване на атрибут на обекта:
B.show = lambda: print(f"Обект В: {B.value}") #Използвайки ламбда-функция създавам атрибут value към обект В, аналогично на B.value = Bravo.value

#Атрибути на първия клас:
print(f"Клас Alpha")

n = 1
for s in Alpha.__dict__:
    print(f"[{n}] {s}: {Alpha.__dict__[s]}")
    n += 1
print()
#Атрибути на втория клас

n = 1
for s in Bravo.__dict__:
    print(f"[{n}] {s}: {Bravo.__dict__[s]}")
    n += 1

#Атрибути на обектите:
print(f"Обект А: {A.__dict__}")
print(f"Обект В: {B.__dict__}")

print()

#Извикване на методи:
Alpha.display()
Bravo.show(B)
B.show()