#Декораторът е някаква инструкция, която на основата на описания клас позволява да бъде получен друг клас:
#За целта се използва функция, която като аргумент получава някакъв обект(тъй като класовете се реализират посредством обекти) и връща като резултат друг обект, реализиращ друг клас.

#Функция, която получава референция към клас и връща като резултат референция към клас:
def F(Alpha):
    #Вътрешен клас
    class Bravo:
        value = Alpha()
    Bravo.__name__ = "My" + Alpha.__name__
    return Bravo
#Описание на клас
class Charlie:
    #Конструктор
    def __init__(self):
        self.number = 123
    #Метод за показване стойността на полето:
    def show(self):
        print(f"Поле number: {self.number}")
#Създаване на обект на основата на клас, получен при извикването на функцията:
obj = F(Charlie)()
#Проверка на резултата:
obj.value.show()
print(f"Клас на обекта obj: {obj.__class__.__name__}")
print(f"Клас на полето value: {obj.value.__class__.__name__}")

#Функция F приема като аргумент клас. Технически обяснено в качеството на аргумент функцията получава референция към обект, посредством който се реализира клас.
#